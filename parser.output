Terminals unused in grammar

   ROOT
   TOK_CHAR
   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ORD
   TOK_CHR
   TOK_ROOT
   TOK_FUNCTION
   TOK_PARAMLIST
   TOK_PROTOTYPE
   TOK_NEWSTRING
   TOK_INDEX
   TOK_DECLID
   TOK_RETURNVOID
   TOK_VARDECL


State 52 conflicts: 1 reduce/reduce
State 54 conflicts: 2 shift/reduce
State 109 conflicts: 14 shift/reduce
State 114 conflicts: 18 reduce/reduce
State 118 conflicts: 21 reduce/reduce
State 120 conflicts: 21 reduce/reduce
State 124 conflicts: 1 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | %empty

    8 structdef: struct2 '}'

    9 struct2: struct2 fielddecl ';'
   10        | TOK_STRUCT TOK_IDENT '{'

   11 fielddecl: basetype TOK_IDENT
   12          | basetype TOK_ARRAY TOK_IDENT

   13 basetype: TOK_VOID
   14         | TOK_INT
   15         | TOK_STRING
   16         | TOK_IDENT

   17 function: identdecl funcparams ')' block
   18         | identdecl funcparams ')' ';'
   19         | identdecl '(' ')' block
   20         | identdecl '(' ')' ';'

   21 funcparams: '(' identdecl
   22           | funcparams ',' identdecl

   23 identdecl: basetype TOK_IDENT
   24          | basetype TOK_ARRAY TOK_IDENT

   25 block: blockbody '}'
   26      | ';'

   27 blockbody: blockbody statement
   28          | '{' statement

   29 statement: block
   30          | vardecl
   31          | while
   32          | ifelse
   33          | return
   34          | expr ';'

   35 vardecl: identdecl '=' expr ';'

   36 while: TOK_WHILE '(' expr ')' statement

   37 ifelse: TOK_IF '(' expr ')' statement
   38       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   39 return: TOK_RETURN expr ';'
   40       | TOK_RETURN ';'

   41 expr: expr binop expr
   42     | unop
   43     | allocator
   44     | call
   45     | '(' expr ')'
   46     | variable
   47     | constant

   48 binop: TOK_EQ
   49      | TOK_NE
   50      | TOK_LT
   51      | TOK_LE
   52      | TOK_GT
   53      | TOK_GE
   54      | '+'
   55      | '-'
   56      | '*'
   57      | '/'
   58      | '='
   59      | '%'

   60 unop: TOK_POS
   61     | TOK_NEG
   62     | '!'
   63     | TOK_NEW expr

   64 allocator: TOK_NEW TOK_IDENT '(' ')'
   65          | TOK_NEW TOK_STRING '(' expr ')'
   66          | TOK_NEW basetype '[' expr ']'

   67 call: TOK_IDENT '(' ')'
   68     | callexprs ')'

   69 callexprs: TOK_IDENT '(' expr
   70          | callexprs ',' expr

   71 variable: TOK_IDENT
   72         | expr '[' expr ']'
   73         | expr '.' TOK_IDENT

   74 constant: TOK_INTCON
   75         | TOK_CHARCON
   76         | TOK_STRINGCON
   77         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 62
'%' (37) 59
'(' (40) 19 20 21 36 37 38 45 64 65 67 69
')' (41) 17 18 19 20 36 37 38 45 64 65 67 68
'*' (42) 56
'+' (43) 54
',' (44) 22 70
'-' (45) 55
'.' (46) 73
'/' (47) 57
';' (59) 6 9 18 20 26 34 35 39 40
'=' (61) 35 58
'[' (91) 66 72
']' (93) 66 72
'{' (123) 10 28
'}' (125) 5 8 25
error (256) 5 6
ROOT (258)
TOK_VOID (259) 13
TOK_CHAR (260)
TOK_INT (261) 14
TOK_STRING (262) 15 65
TOK_IF (263) 37 38
TOK_ELSE (264) 38
TOK_WHILE (265) 36
TOK_RETURN (266) 39 40
TOK_STRUCT (267) 10
TOK_NULL (268) 77
TOK_NEW (269) 63 64 65 66
TOK_ARRAY (270) 12 24
TOK_EQ (271) 48
TOK_NE (272) 49
TOK_LT (273) 50
TOK_LE (274) 51
TOK_GT (275) 52
TOK_GE (276) 53
TOK_IDENT (277) 10 11 12 16 23 24 64 67 69 71 73
TOK_INTCON (278) 74
TOK_CHARCON (279) 75
TOK_STRINGCON (280) 76
TOK_BLOCK (281)
TOK_CALL (282)
TOK_IFELSE (283)
TOK_INITDECL (284)
TOK_POS (285) 60
TOK_NEG (286) 61
TOK_NEWARRAY (287)
TOK_TYPEID (288)
TOK_FIELD (289)
TOK_ORD (290)
TOK_CHR (291)
TOK_ROOT (292)
TOK_FUNCTION (293)
TOK_PARAMLIST (294)
TOK_PROTOTYPE (295)
TOK_NEWSTRING (296)
TOK_INDEX (297)
TOK_DECLID (298)
TOK_RETURNVOID (299)
TOK_VARDECL (300)


Nonterminals, with rules where they appear

$accept (62)
    on left: 0
start (63)
    on left: 1, on right: 0
program (64)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (65)
    on left: 8, on right: 2
struct2 (66)
    on left: 9 10, on right: 8 9
fielddecl (67)
    on left: 11 12, on right: 9
basetype (68)
    on left: 13 14 15 16, on right: 11 12 23 24 66
function (69)
    on left: 17 18 19 20, on right: 3
funcparams (70)
    on left: 21 22, on right: 17 18 22
identdecl (71)
    on left: 23 24, on right: 17 18 19 20 21 22 35
block (72)
    on left: 25 26, on right: 17 19 29
blockbody (73)
    on left: 27 28, on right: 25 27
statement (74)
    on left: 29 30 31 32 33 34, on right: 4 27 28 36 37 38
vardecl (75)
    on left: 35, on right: 30
while (76)
    on left: 36, on right: 31
ifelse (77)
    on left: 37 38, on right: 32
return (78)
    on left: 39 40, on right: 33
expr (79)
    on left: 41 42 43 44 45 46 47, on right: 34 35 36 37 38 39 41 45
    63 65 66 69 70 72 73
binop (80)
    on left: 48 49 50 51 52 53 54 55 56 57 58 59, on right: 41
unop (81)
    on left: 60 61 62 63, on right: 42
allocator (82)
    on left: 64 65 66, on right: 43
call (83)
    on left: 67 68, on right: 44
callexprs (84)
    on left: 69 70, on right: 68 70
variable (85)
    on left: 71 72 73, on right: 46
constant (86)
    on left: 74 75 76 77, on right: 47


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_STRUCT     shift, and go to state 11
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23

    $end  reduce using rule 1 (start)

    structdef  go to state 24
    struct2    go to state 25
    basetype   go to state 26
    function   go to state 27
    identdecl  go to state 28
    block      go to state 29
    blockbody  go to state 30
    statement  go to state 31
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 43
    ';'  shift, and go to state 44


State 5

   13 basetype: TOK_VOID .

    $default  reduce using rule 13 (basetype)


State 6

   14 basetype: TOK_INT .

    $default  reduce using rule 14 (basetype)


State 7

   15 basetype: TOK_STRING .

    $default  reduce using rule 15 (basetype)


State 8

   37 ifelse: TOK_IF . '(' expr ')' statement
   38       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 45


State 9

   36 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 46


State 10

   39 return: TOK_RETURN . expr ';'
   40       | TOK_RETURN . ';'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21
    ';'            shift, and go to state 48

    expr       go to state 49
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 11

   10 struct2: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 50


State 12

   77 constant: TOK_NULL .

    $default  reduce using rule 77 (constant)


State 13

   63 unop: TOK_NEW . expr
   64 allocator: TOK_NEW . TOK_IDENT '(' ')'
   65          | TOK_NEW . TOK_STRING '(' expr ')'
   66          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 51
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    basetype   go to state 53
    expr       go to state 54
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 14

   16 basetype: TOK_IDENT .
   67 call: TOK_IDENT . '(' ')'
   69 callexprs: TOK_IDENT . '(' expr
   71 variable: TOK_IDENT .

    '('  shift, and go to state 55

    TOK_ARRAY  reduce using rule 16 (basetype)
    TOK_IDENT  reduce using rule 16 (basetype)
    $default   reduce using rule 71 (variable)


State 15

   74 constant: TOK_INTCON .

    $default  reduce using rule 74 (constant)


State 16

   75 constant: TOK_CHARCON .

    $default  reduce using rule 75 (constant)


State 17

   76 constant: TOK_STRINGCON .

    $default  reduce using rule 76 (constant)


State 18

   60 unop: TOK_POS .

    $default  reduce using rule 60 (unop)


State 19

   61 unop: TOK_NEG .

    $default  reduce using rule 61 (unop)


State 20

   62 unop: '!' .

    $default  reduce using rule 62 (unop)


State 21

   45 expr: '(' . expr ')'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 56
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 22

   26 block: ';' .

    $default  reduce using rule 26 (block)


State 23

   28 blockbody: '{' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23

    basetype   go to state 26
    identdecl  go to state 57
    block      go to state 29
    blockbody  go to state 30
    statement  go to state 58
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 24

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 25

    8 structdef: struct2 . '}'
    9 struct2: struct2 . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 59
    '}'         shift, and go to state 60

    fielddecl  go to state 61
    basetype   go to state 62


State 26

   23 identdecl: basetype . TOK_IDENT
   24          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 63
    TOK_IDENT  shift, and go to state 64


State 27

    3 program: program function .

    $default  reduce using rule 3 (program)


State 28

   17 function: identdecl . funcparams ')' block
   18         | identdecl . funcparams ')' ';'
   19         | identdecl . '(' ')' block
   20         | identdecl . '(' ')' ';'
   35 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 65
    '('  shift, and go to state 66

    funcparams  go to state 67


State 29

   29 statement: block .

    $default  reduce using rule 29 (statement)


State 30

   25 block: blockbody . '}'
   27 blockbody: blockbody . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21
    '}'            shift, and go to state 68
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23

    basetype   go to state 26
    identdecl  go to state 57
    block      go to state 29
    blockbody  go to state 30
    statement  go to state 69
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 31

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 32

   30 statement: vardecl .

    $default  reduce using rule 30 (statement)


State 33

   31 statement: while .

    $default  reduce using rule 31 (statement)


State 34

   32 statement: ifelse .

    $default  reduce using rule 32 (statement)


State 35

   33 statement: return .

    $default  reduce using rule 33 (statement)


State 36

   34 statement: expr . ';'
   41 expr: expr . binop expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '%'     shift, and go to state 81
    ';'     shift, and go to state 82
    '['     shift, and go to state 83
    '.'     shift, and go to state 84

    binop  go to state 85


State 37

   42 expr: unop .

    $default  reduce using rule 42 (expr)


State 38

   43 expr: allocator .

    $default  reduce using rule 43 (expr)


State 39

   44 expr: call .

    $default  reduce using rule 44 (expr)


State 40

   68 call: callexprs . ')'
   70 callexprs: callexprs . ',' expr

    ')'  shift, and go to state 86
    ','  shift, and go to state 87


State 41

   46 expr: variable .

    $default  reduce using rule 46 (expr)


State 42

   47 expr: constant .

    $default  reduce using rule 47 (expr)


State 43

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 44

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 45

   37 ifelse: TOK_IF '(' . expr ')' statement
   38       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 88
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 46

   36 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 89
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 47

   67 call: TOK_IDENT . '(' ')'
   69 callexprs: TOK_IDENT . '(' expr
   71 variable: TOK_IDENT .

    '('  shift, and go to state 55

    $default  reduce using rule 71 (variable)


State 48

   40 return: TOK_RETURN ';' .

    $default  reduce using rule 40 (return)


State 49

   39 return: TOK_RETURN expr . ';'
   41 expr: expr . binop expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '%'     shift, and go to state 81
    ';'     shift, and go to state 90
    '['     shift, and go to state 83
    '.'     shift, and go to state 84

    binop  go to state 85


State 50

   10 struct2: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 91


State 51

   15 basetype: TOK_STRING .
   65 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 92

    $default  reduce using rule 15 (basetype)


State 52

   16 basetype: TOK_IDENT .
   64 allocator: TOK_NEW TOK_IDENT . '(' ')'
   67 call: TOK_IDENT . '(' ')'
   69 callexprs: TOK_IDENT . '(' expr
   71 variable: TOK_IDENT .

    '('  shift, and go to state 93

    '['       reduce using rule 16 (basetype)
    '['       [reduce using rule 71 (variable)]
    $default  reduce using rule 71 (variable)


State 53

   66 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 94


State 54

   41 expr: expr . binop expr
   63 unop: TOK_NEW expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '['  shift, and go to state 83
    '.'  shift, and go to state 84

    '['       [reduce using rule 63 (unop)]
    '.'       [reduce using rule 63 (unop)]
    $default  reduce using rule 63 (unop)

    binop  go to state 85


State 55

   67 call: TOK_IDENT '(' . ')'
   69 callexprs: TOK_IDENT '(' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21
    ')'            shift, and go to state 95

    expr       go to state 96
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 56

   41 expr: expr . binop expr
   45     | '(' expr . ')'
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '%'     shift, and go to state 81
    ')'     shift, and go to state 97
    '['     shift, and go to state 83
    '.'     shift, and go to state 84

    binop  go to state 85


State 57

   35 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 65


State 58

   28 blockbody: '{' statement .

    $default  reduce using rule 28 (blockbody)


State 59

   16 basetype: TOK_IDENT .

    $default  reduce using rule 16 (basetype)


State 60

    8 structdef: struct2 '}' .

    $default  reduce using rule 8 (structdef)


State 61

    9 struct2: struct2 fielddecl . ';'

    ';'  shift, and go to state 98


State 62

   11 fielddecl: basetype . TOK_IDENT
   12          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 99
    TOK_IDENT  shift, and go to state 100


State 63

   24 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 101


State 64

   23 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 23 (identdecl)


State 65

   35 vardecl: identdecl '=' . expr ';'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 102
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 66

   19 function: identdecl '(' . ')' block
   20         | identdecl '(' . ')' ';'
   21 funcparams: '(' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 59
    ')'         shift, and go to state 103

    basetype   go to state 26
    identdecl  go to state 104


State 67

   17 function: identdecl funcparams . ')' block
   18         | identdecl funcparams . ')' ';'
   22 funcparams: funcparams . ',' identdecl

    ')'  shift, and go to state 105
    ','  shift, and go to state 106


State 68

   25 block: blockbody '}' .

    $default  reduce using rule 25 (block)


State 69

   27 blockbody: blockbody statement .

    $default  reduce using rule 27 (blockbody)


State 70

   48 binop: TOK_EQ .

    $default  reduce using rule 48 (binop)


State 71

   49 binop: TOK_NE .

    $default  reduce using rule 49 (binop)


State 72

   50 binop: TOK_LT .

    $default  reduce using rule 50 (binop)


State 73

   51 binop: TOK_LE .

    $default  reduce using rule 51 (binop)


State 74

   52 binop: TOK_GT .

    $default  reduce using rule 52 (binop)


State 75

   53 binop: TOK_GE .

    $default  reduce using rule 53 (binop)


State 76

   58 binop: '=' .

    $default  reduce using rule 58 (binop)


State 77

   54 binop: '+' .

    $default  reduce using rule 54 (binop)


State 78

   55 binop: '-' .

    $default  reduce using rule 55 (binop)


State 79

   56 binop: '*' .

    $default  reduce using rule 56 (binop)


State 80

   57 binop: '/' .

    $default  reduce using rule 57 (binop)


State 81

   59 binop: '%' .

    $default  reduce using rule 59 (binop)


State 82

   34 statement: expr ';' .

    $default  reduce using rule 34 (statement)


State 83

   72 variable: expr '[' . expr ']'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 107
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 84

   73 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 108


State 85

   41 expr: expr binop . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 109
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 86

   68 call: callexprs ')' .

    $default  reduce using rule 68 (call)


State 87

   70 callexprs: callexprs ',' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 110
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 88

   37 ifelse: TOK_IF '(' expr . ')' statement
   38       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   41 expr: expr . binop expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '%'     shift, and go to state 81
    ')'     shift, and go to state 111
    '['     shift, and go to state 83
    '.'     shift, and go to state 84

    binop  go to state 85


State 89

   36 while: TOK_WHILE '(' expr . ')' statement
   41 expr: expr . binop expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '%'     shift, and go to state 81
    ')'     shift, and go to state 112
    '['     shift, and go to state 83
    '.'     shift, and go to state 84

    binop  go to state 85


State 90

   39 return: TOK_RETURN expr ';' .

    $default  reduce using rule 39 (return)


State 91

   10 struct2: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 10 (struct2)


State 92

   65 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 113
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 93

   64 allocator: TOK_NEW TOK_IDENT '(' . ')'
   67 call: TOK_IDENT '(' . ')'
   69 callexprs: TOK_IDENT '(' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21
    ')'            shift, and go to state 114

    expr       go to state 96
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 94

   66 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21

    expr       go to state 115
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 95

   67 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 67 (call)


State 96

   41 expr: expr . binop expr
   69 callexprs: TOK_IDENT '(' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '%'     shift, and go to state 81
    '['     shift, and go to state 83
    '.'     shift, and go to state 84

    $default  reduce using rule 69 (callexprs)

    binop  go to state 85


State 97

   45 expr: '(' expr ')' .

    $default  reduce using rule 45 (expr)


State 98

    9 struct2: struct2 fielddecl ';' .

    $default  reduce using rule 9 (struct2)


State 99

   12 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 116


State 100

   11 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 11 (fielddecl)


State 101

   24 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 24 (identdecl)


State 102

   35 vardecl: identdecl '=' expr . ';'
   41 expr: expr . binop expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '%'     shift, and go to state 81
    ';'     shift, and go to state 117
    '['     shift, and go to state 83
    '.'     shift, and go to state 84

    binop  go to state 85


State 103

   19 function: identdecl '(' ')' . block
   20         | identdecl '(' ')' . ';'

    ';'  shift, and go to state 118
    '{'  shift, and go to state 23

    block      go to state 119
    blockbody  go to state 30


State 104

   21 funcparams: '(' identdecl .

    $default  reduce using rule 21 (funcparams)


State 105

   17 function: identdecl funcparams ')' . block
   18         | identdecl funcparams ')' . ';'

    ';'  shift, and go to state 120
    '{'  shift, and go to state 23

    block      go to state 121
    blockbody  go to state 30


State 106

   22 funcparams: funcparams ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 59

    basetype   go to state 26
    identdecl  go to state 122


State 107

   41 expr: expr . binop expr
   72 variable: expr . '[' expr ']'
   72         | expr '[' expr . ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '%'     shift, and go to state 81
    '['     shift, and go to state 83
    ']'     shift, and go to state 123
    '.'     shift, and go to state 84

    binop  go to state 85


State 108

   73 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 73 (variable)


State 109

   41 expr: expr . binop expr
   41     | expr binop expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '%'     shift, and go to state 81
    '['     shift, and go to state 83
    '.'     shift, and go to state 84

    TOK_EQ    [reduce using rule 41 (expr)]
    TOK_NE    [reduce using rule 41 (expr)]
    TOK_LT    [reduce using rule 41 (expr)]
    TOK_LE    [reduce using rule 41 (expr)]
    TOK_GT    [reduce using rule 41 (expr)]
    TOK_GE    [reduce using rule 41 (expr)]
    '='       [reduce using rule 41 (expr)]
    '+'       [reduce using rule 41 (expr)]
    '-'       [reduce using rule 41 (expr)]
    '*'       [reduce using rule 41 (expr)]
    '/'       [reduce using rule 41 (expr)]
    '%'       [reduce using rule 41 (expr)]
    '['       [reduce using rule 41 (expr)]
    '.'       [reduce using rule 41 (expr)]
    $default  reduce using rule 41 (expr)

    binop  go to state 85


State 110

   41 expr: expr . binop expr
   70 callexprs: callexprs ',' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '%'     shift, and go to state 81
    '['     shift, and go to state 83
    '.'     shift, and go to state 84

    $default  reduce using rule 70 (callexprs)

    binop  go to state 85


State 111

   37 ifelse: TOK_IF '(' expr ')' . statement
   38       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23

    basetype   go to state 26
    identdecl  go to state 57
    block      go to state 29
    blockbody  go to state 30
    statement  go to state 124
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 112

   36 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23

    basetype   go to state 26
    identdecl  go to state 57
    block      go to state 29
    blockbody  go to state 30
    statement  go to state 125
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 113

   41 expr: expr . binop expr
   65 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '%'     shift, and go to state 81
    ')'     shift, and go to state 126
    '['     shift, and go to state 83
    '.'     shift, and go to state 84

    binop  go to state 85


State 114

   64 allocator: TOK_NEW TOK_IDENT '(' ')' .
   67 call: TOK_IDENT '(' ')' .

    TOK_EQ    reduce using rule 64 (allocator)
    TOK_EQ    [reduce using rule 67 (call)]
    TOK_NE    reduce using rule 64 (allocator)
    TOK_NE    [reduce using rule 67 (call)]
    TOK_LT    reduce using rule 64 (allocator)
    TOK_LT    [reduce using rule 67 (call)]
    TOK_LE    reduce using rule 64 (allocator)
    TOK_LE    [reduce using rule 67 (call)]
    TOK_GT    reduce using rule 64 (allocator)
    TOK_GT    [reduce using rule 67 (call)]
    TOK_GE    reduce using rule 64 (allocator)
    TOK_GE    [reduce using rule 67 (call)]
    '='       reduce using rule 64 (allocator)
    '='       [reduce using rule 67 (call)]
    '+'       reduce using rule 64 (allocator)
    '+'       [reduce using rule 67 (call)]
    '-'       reduce using rule 64 (allocator)
    '-'       [reduce using rule 67 (call)]
    '*'       reduce using rule 64 (allocator)
    '*'       [reduce using rule 67 (call)]
    '/'       reduce using rule 64 (allocator)
    '/'       [reduce using rule 67 (call)]
    '%'       reduce using rule 64 (allocator)
    '%'       [reduce using rule 67 (call)]
    ';'       reduce using rule 64 (allocator)
    ';'       [reduce using rule 67 (call)]
    ')'       reduce using rule 64 (allocator)
    ')'       [reduce using rule 67 (call)]
    ','       reduce using rule 64 (allocator)
    ','       [reduce using rule 67 (call)]
    '['       reduce using rule 64 (allocator)
    '['       [reduce using rule 67 (call)]
    ']'       reduce using rule 64 (allocator)
    ']'       [reduce using rule 67 (call)]
    '.'       reduce using rule 64 (allocator)
    '.'       [reduce using rule 67 (call)]
    $default  reduce using rule 64 (allocator)


State 115

   41 expr: expr . binop expr
   66 allocator: TOK_NEW basetype '[' expr . ']'
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '%'     shift, and go to state 81
    '['     shift, and go to state 83
    ']'     shift, and go to state 127
    '.'     shift, and go to state 84

    binop  go to state 85


State 116

   12 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


State 117

   35 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 35 (vardecl)


State 118

   20 function: identdecl '(' ')' ';' .
   26 block: ';' .

    $end           reduce using rule 20 (function)
    $end           [reduce using rule 26 (block)]
    error          reduce using rule 20 (function)
    error          [reduce using rule 26 (block)]
    TOK_VOID       reduce using rule 20 (function)
    TOK_VOID       [reduce using rule 26 (block)]
    TOK_INT        reduce using rule 20 (function)
    TOK_INT        [reduce using rule 26 (block)]
    TOK_STRING     reduce using rule 20 (function)
    TOK_STRING     [reduce using rule 26 (block)]
    TOK_IF         reduce using rule 20 (function)
    TOK_IF         [reduce using rule 26 (block)]
    TOK_WHILE      reduce using rule 20 (function)
    TOK_WHILE      [reduce using rule 26 (block)]
    TOK_RETURN     reduce using rule 20 (function)
    TOK_RETURN     [reduce using rule 26 (block)]
    TOK_STRUCT     reduce using rule 20 (function)
    TOK_STRUCT     [reduce using rule 26 (block)]
    TOK_NULL       reduce using rule 20 (function)
    TOK_NULL       [reduce using rule 26 (block)]
    TOK_NEW        reduce using rule 20 (function)
    TOK_NEW        [reduce using rule 26 (block)]
    TOK_IDENT      reduce using rule 20 (function)
    TOK_IDENT      [reduce using rule 26 (block)]
    TOK_INTCON     reduce using rule 20 (function)
    TOK_INTCON     [reduce using rule 26 (block)]
    TOK_CHARCON    reduce using rule 20 (function)
    TOK_CHARCON    [reduce using rule 26 (block)]
    TOK_STRINGCON  reduce using rule 20 (function)
    TOK_STRINGCON  [reduce using rule 26 (block)]
    TOK_POS        reduce using rule 20 (function)
    TOK_POS        [reduce using rule 26 (block)]
    TOK_NEG        reduce using rule 20 (function)
    TOK_NEG        [reduce using rule 26 (block)]
    '!'            reduce using rule 20 (function)
    '!'            [reduce using rule 26 (block)]
    '('            reduce using rule 20 (function)
    '('            [reduce using rule 26 (block)]
    ';'            reduce using rule 20 (function)
    ';'            [reduce using rule 26 (block)]
    '{'            reduce using rule 20 (function)
    '{'            [reduce using rule 26 (block)]
    $default       reduce using rule 20 (function)


State 119

   19 function: identdecl '(' ')' block .

    $default  reduce using rule 19 (function)


State 120

   18 function: identdecl funcparams ')' ';' .
   26 block: ';' .

    $end           reduce using rule 18 (function)
    $end           [reduce using rule 26 (block)]
    error          reduce using rule 18 (function)
    error          [reduce using rule 26 (block)]
    TOK_VOID       reduce using rule 18 (function)
    TOK_VOID       [reduce using rule 26 (block)]
    TOK_INT        reduce using rule 18 (function)
    TOK_INT        [reduce using rule 26 (block)]
    TOK_STRING     reduce using rule 18 (function)
    TOK_STRING     [reduce using rule 26 (block)]
    TOK_IF         reduce using rule 18 (function)
    TOK_IF         [reduce using rule 26 (block)]
    TOK_WHILE      reduce using rule 18 (function)
    TOK_WHILE      [reduce using rule 26 (block)]
    TOK_RETURN     reduce using rule 18 (function)
    TOK_RETURN     [reduce using rule 26 (block)]
    TOK_STRUCT     reduce using rule 18 (function)
    TOK_STRUCT     [reduce using rule 26 (block)]
    TOK_NULL       reduce using rule 18 (function)
    TOK_NULL       [reduce using rule 26 (block)]
    TOK_NEW        reduce using rule 18 (function)
    TOK_NEW        [reduce using rule 26 (block)]
    TOK_IDENT      reduce using rule 18 (function)
    TOK_IDENT      [reduce using rule 26 (block)]
    TOK_INTCON     reduce using rule 18 (function)
    TOK_INTCON     [reduce using rule 26 (block)]
    TOK_CHARCON    reduce using rule 18 (function)
    TOK_CHARCON    [reduce using rule 26 (block)]
    TOK_STRINGCON  reduce using rule 18 (function)
    TOK_STRINGCON  [reduce using rule 26 (block)]
    TOK_POS        reduce using rule 18 (function)
    TOK_POS        [reduce using rule 26 (block)]
    TOK_NEG        reduce using rule 18 (function)
    TOK_NEG        [reduce using rule 26 (block)]
    '!'            reduce using rule 18 (function)
    '!'            [reduce using rule 26 (block)]
    '('            reduce using rule 18 (function)
    '('            [reduce using rule 26 (block)]
    ';'            reduce using rule 18 (function)
    ';'            [reduce using rule 26 (block)]
    '{'            reduce using rule 18 (function)
    '{'            [reduce using rule 26 (block)]
    $default       reduce using rule 18 (function)


State 121

   17 function: identdecl funcparams ')' block .

    $default  reduce using rule 17 (function)


State 122

   22 funcparams: funcparams ',' identdecl .

    $default  reduce using rule 22 (funcparams)


State 123

   72 variable: expr '[' expr ']' .

    $default  reduce using rule 72 (variable)


State 124

   37 ifelse: TOK_IF '(' expr ')' statement .
   38       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 128

    TOK_ELSE  [reduce using rule 37 (ifelse)]
    $default  reduce using rule 37 (ifelse)


State 125

   36 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 36 (while)


State 126

   65 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 65 (allocator)


State 127

   66 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 66 (allocator)


State 128

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    TOK_POS        shift, and go to state 18
    TOK_NEG        shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23

    basetype   go to state 26
    identdecl  go to state 57
    block      go to state 29
    blockbody  go to state 30
    statement  go to state 129
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    callexprs  go to state 40
    variable   go to state 41
    constant   go to state 42


State 129

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 38 (ifelse)
